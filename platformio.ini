[platformio]
build_cache_dir = ~/.platformio/cache
boards_dir = Common/boards
include_dir = Common/include
lib_dir = Common/lib
src_dir = Common/src

[env]
platform = ststm32 @ ^11.0.0
framework = mbed
platform_packages = framework-mbed @ ^6.60600.0
debug_tool = stlink
upload_protocol = stlink

build_flags = -D PIO_FRAMEWORK_MBED_RTOS_PRESENT
extra_scripts = pre:Common/scripts/extra_script.py
src_filter = +<*> -<TARGET_STM32G473CET6x>
lib_ldf_mode = chain+
lib_ignore = MbedMock, FakeIt

check_tool = clangtidy

[env:nucleo_f413zh_ecu]
extends = ecu
board = nucleo_f413zh
build_flags = ${ecu.build_flags} -I ECU/include/dev_boards

[env:nucleo_f413zh_motor]
extends = motor
board = nucleo_f413zh
build_flags = ${motor.build_flags} -I Motor/include/dev_boards

[env:nucleo_f413zh_power_aux]
extends = power_aux
board = nucleo_f413zh
build_flags = ${power_aux.build_flags} -I PowerAux/include/dev_boards

[env:nucleo_f413zh_solar]
extends = solar
board = nucleo_f413zh
build_flags = ${solar.build_flags} -I Solar/include/dev_boards

[env:nucleo_h743zi_ecu]
extends = ecu
board = nucleo_h743zi
build_flags = ${ecu.build_flags} -I ECU/include/dev_boards

[env:nucleo_h743zi_motor]
extends = motor
board = nucleo_h743zi
build_flags = ${motor.build_flags} -I Motor/include/dev_boards

[env:nucleo_h743zi_power_aux]
extends = power_aux
board = nucleo_h743zi
build_flags = ${power_aux.build_flags} -I PowerAux/include/dev_boards

[env:nucleo_h743zi_solar]
extends = solar
board = nucleo_h743zi
build_flags = ${solar.build_flags} -I Solar/include/dev_boards

[uva_solar_car]
board = uva_solar_car
build_flags = ${env.build_flags} -I $PROJECT_SRC_DIR/TARGET_STM32G473CET6x -I $PROJECT_SRC_DIR/TARGET_STM32G473CET6x/device
src_filter = +<TARGET_STM32G473CET6x>

; [env:nucleo_g474re]
; board = nucleo_g474re
; build_flags = ${env.build_flags} -I $PROJECT_INCLUDE_DIR/uva_solar_car

[ecu]
build_flags = ${env.build_flags} -I ECU/include
lib_extra_dirs = ECU/lib
src_filter = ${env.src_filter} +<../../ECU/src>
check_patterns = ECU/

[env:ecu]
extends = uva_solar_car, ecu
build_flags = ${uva_solar_car.build_flags} ${ecu.build_flags} -I ECU/include/uva_solar_car
src_filter = ${ecu.src_filter} ${uva_solar_car.src_filter}

[motor]
build_flags = ${env.build_flags} -I Motor/include
lib_extra_dirs = Motor/lib
src_filter = ${env.src_filter} +<../../Motor/src>
check_patterns = Motor/

[env:motor]
extends = uva_solar_car, motor
build_flags = ${uva_solar_car.build_flags} ${motor.build_flags} -I Motor/include/uva_solar_car
src_filter = ${motor.src_filter} ${uva_solar_car.src_filter}

[power_aux]
build_flags = ${env.build_flags} -I PowerAux/include
lib_extra_dirs = PowerAux/lib
src_filter = ${env.src_filter} +<../../PowerAux/src>
check_patterns = PowerAux/

[env:power_aux]
extends = uva_solar_car, power_aux
build_flags = ${uva_solar_car.build_flags} ${power_aux.build_flags} -I PowerAux/include/uva_solar_car
src_filter = ${power_aux.src_filter} ${uva_solar_car.src_filter}

[solar]
build_flags = ${env.build_flags} -I Solar/include
lib_extra_dirs = Solar/lib
src_filter = ${env.src_filter} +<../../Solar/src>
check_patterns = Solar/

[env:solar]
extends = uva_solar_car, solar
build_flags = ${uva_solar_car.build_flags} ${solar.build_flags} -I Solar/include/uva_solar_car
src_filter = ${solar.src_filter} ${uva_solar_car.src_filter}

[env:native]
platform = native
framework = ; blank indicates no framework
build_flags = ${env.build_flags} -D NATIVE --coverage
lib_extra_dirs = ECU/lib Motor/lib PowerAux/lib Solar/lib
lib_ignore = ; blank indicates to not ignore MbedMock and FakeIt
extra_scripts = ${env.extra_scripts}, Common/scripts/enable_coverage.py
check_patterns = 
    Common/[!lib]*
    Common/lib/[!FakeIt][!MbedMock]*
    ECU/
    Motor/
    PowerAux/
    Solar/
    test/
