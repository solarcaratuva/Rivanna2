/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.1.0 Sun Jun 26 23:31:05 2022.
 */

#ifndef RIVANNA2_H
#define RIVANNA2_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define RIVANNA2_POWER_AUX_ERROR_FRAME_ID (0x123u)
#define RIVANNA2_ECU_MOTOR_COMMANDS_FRAME_ID (0x201u)
#define RIVANNA2_ECU_POWER_AUX_COMMANDS_FRAME_ID (0x301u)
#define RIVANNA2_SOLAR_CURRENT_FRAME_ID (0x434u)
#define RIVANNA2_SOLAR_VOLTAGE_FRAME_ID (0x444u)
#define RIVANNA2_SOLAR_TEMP_FRAME_ID (0x454u)
#define RIVANNA2_SOLAR_PHOTO_FRAME_ID (0x464u)

/* Frame lengths in bytes. */
#define RIVANNA2_POWER_AUX_ERROR_LENGTH (8u)
#define RIVANNA2_ECU_MOTOR_COMMANDS_LENGTH (4u)
#define RIVANNA2_ECU_POWER_AUX_COMMANDS_LENGTH (1u)
#define RIVANNA2_SOLAR_CURRENT_LENGTH (2u)
#define RIVANNA2_SOLAR_VOLTAGE_LENGTH (8u)
#define RIVANNA2_SOLAR_TEMP_LENGTH (8u)
#define RIVANNA2_SOLAR_PHOTO_LENGTH (8u)

/* Extended or standard frame types. */
#define RIVANNA2_POWER_AUX_ERROR_IS_EXTENDED (0)
#define RIVANNA2_ECU_MOTOR_COMMANDS_IS_EXTENDED (0)
#define RIVANNA2_ECU_POWER_AUX_COMMANDS_IS_EXTENDED (0)
#define RIVANNA2_SOLAR_CURRENT_IS_EXTENDED (0)
#define RIVANNA2_SOLAR_VOLTAGE_IS_EXTENDED (0)
#define RIVANNA2_SOLAR_TEMP_IS_EXTENDED (0)
#define RIVANNA2_SOLAR_PHOTO_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message PowerAuxError.
 *
 * All signal values are as on the CAN bus.
 */
struct rivanna2_power_aux_error_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fan_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_light_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t headlight_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bps_strobe_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_turn_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_turn_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bps_error;
};

/**
 * Signals in message ECUMotorCommands.
 *
 * All signal values are as on the CAN bus.
 */
struct rivanna2_ecu_motor_commands_t {
    /**
     * Range: 0..256 (0..256 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t throttle;

    /**
     * Range: 0..256 (0..256 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_control_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_control_en;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t forward_en;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reverse_en;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_on;
};

/**
 * Signals in message ECUPowerAuxCommands.
 *
 * All signal values are as on the CAN bus.
 */
struct rivanna2_ecu_power_aux_commands_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hazards;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_lights;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t headlights;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_turn_signal;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_turn_signal;
};

/**
 * Signals in message SolarCurrent.
 *
 * All signal values are as on the CAN bus.
 */
struct rivanna2_solar_current_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t total_current;
};

/**
 * Signals in message SolarVoltage.
 *
 * All signal values are as on the CAN bus.
 */
struct rivanna2_solar_voltage_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel1_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel2_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel3_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel4_voltage;
};

/**
 * Signals in message SolarTemp.
 *
 * All signal values are as on the CAN bus.
 */
struct rivanna2_solar_temp_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel1_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel2_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel3_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel4_temp;
};

/**
 * Signals in message SolarPhoto.
 *
 * All signal values are as on the CAN bus.
 */
struct rivanna2_solar_photo_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel1_photo;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel2_photo;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel3_photo;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t panel4_photo;
};

/**
 * Pack message PowerAuxError.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rivanna2_power_aux_error_pack(
    uint8_t *dst_p,
    const struct rivanna2_power_aux_error_t *src_p,
    size_t size);

/**
 * Unpack message PowerAuxError.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rivanna2_power_aux_error_unpack(
    struct rivanna2_power_aux_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_power_aux_error_fan_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_power_aux_error_fan_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_power_aux_error_fan_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_power_aux_error_brake_light_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_power_aux_error_brake_light_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_power_aux_error_brake_light_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_power_aux_error_headlight_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_power_aux_error_headlight_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_power_aux_error_headlight_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_power_aux_error_bps_strobe_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_power_aux_error_bps_strobe_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_power_aux_error_bps_strobe_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_power_aux_error_left_turn_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_power_aux_error_left_turn_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_power_aux_error_left_turn_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_power_aux_error_right_turn_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_power_aux_error_right_turn_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_power_aux_error_right_turn_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_power_aux_error_bps_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_power_aux_error_bps_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_power_aux_error_bps_error_is_in_range(uint8_t value);

/**
 * Pack message ECUMotorCommands.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rivanna2_ecu_motor_commands_pack(
    uint8_t *dst_p,
    const struct rivanna2_ecu_motor_commands_t *src_p,
    size_t size);

/**
 * Unpack message ECUMotorCommands.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rivanna2_ecu_motor_commands_unpack(
    struct rivanna2_ecu_motor_commands_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_ecu_motor_commands_throttle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_motor_commands_throttle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_motor_commands_throttle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_ecu_motor_commands_regen_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_motor_commands_regen_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_motor_commands_regen_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_motor_commands_cruise_control_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_motor_commands_cruise_control_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_motor_commands_cruise_control_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_motor_commands_cruise_control_en_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_motor_commands_cruise_control_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_motor_commands_cruise_control_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_motor_commands_forward_en_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_motor_commands_forward_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_motor_commands_forward_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_motor_commands_reverse_en_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_motor_commands_reverse_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_motor_commands_reverse_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_motor_commands_motor_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_motor_commands_motor_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_motor_commands_motor_on_is_in_range(uint8_t value);

/**
 * Pack message ECUPowerAuxCommands.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rivanna2_ecu_power_aux_commands_pack(
    uint8_t *dst_p,
    const struct rivanna2_ecu_power_aux_commands_t *src_p,
    size_t size);

/**
 * Unpack message ECUPowerAuxCommands.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rivanna2_ecu_power_aux_commands_unpack(
    struct rivanna2_ecu_power_aux_commands_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_power_aux_commands_hazards_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_power_aux_commands_hazards_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_power_aux_commands_hazards_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_power_aux_commands_brake_lights_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_power_aux_commands_brake_lights_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_power_aux_commands_brake_lights_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_power_aux_commands_headlights_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_power_aux_commands_headlights_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_power_aux_commands_headlights_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_power_aux_commands_left_turn_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_power_aux_commands_left_turn_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_power_aux_commands_left_turn_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rivanna2_ecu_power_aux_commands_right_turn_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_ecu_power_aux_commands_right_turn_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_ecu_power_aux_commands_right_turn_signal_is_in_range(uint8_t value);

/**
 * Pack message SolarCurrent.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rivanna2_solar_current_pack(
    uint8_t *dst_p,
    const struct rivanna2_solar_current_t *src_p,
    size_t size);

/**
 * Unpack message SolarCurrent.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rivanna2_solar_current_unpack(
    struct rivanna2_solar_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_current_total_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_current_total_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_current_total_current_is_in_range(uint16_t value);

/**
 * Pack message SolarVoltage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rivanna2_solar_voltage_pack(
    uint8_t *dst_p,
    const struct rivanna2_solar_voltage_t *src_p,
    size_t size);

/**
 * Unpack message SolarVoltage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rivanna2_solar_voltage_unpack(
    struct rivanna2_solar_voltage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_voltage_panel1_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_voltage_panel1_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_voltage_panel1_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_voltage_panel2_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_voltage_panel2_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_voltage_panel2_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_voltage_panel3_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_voltage_panel3_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_voltage_panel3_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_voltage_panel4_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_voltage_panel4_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_voltage_panel4_voltage_is_in_range(uint16_t value);

/**
 * Pack message SolarTemp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rivanna2_solar_temp_pack(
    uint8_t *dst_p,
    const struct rivanna2_solar_temp_t *src_p,
    size_t size);

/**
 * Unpack message SolarTemp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rivanna2_solar_temp_unpack(
    struct rivanna2_solar_temp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_temp_panel1_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_temp_panel1_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_temp_panel1_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_temp_panel2_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_temp_panel2_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_temp_panel2_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_temp_panel3_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_temp_panel3_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_temp_panel3_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_temp_panel4_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_temp_panel4_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_temp_panel4_temp_is_in_range(uint16_t value);

/**
 * Pack message SolarPhoto.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rivanna2_solar_photo_pack(
    uint8_t *dst_p,
    const struct rivanna2_solar_photo_t *src_p,
    size_t size);

/**
 * Unpack message SolarPhoto.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rivanna2_solar_photo_unpack(
    struct rivanna2_solar_photo_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_photo_panel1_photo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_photo_panel1_photo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_photo_panel1_photo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_photo_panel2_photo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_photo_panel2_photo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_photo_panel2_photo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_photo_panel3_photo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_photo_panel3_photo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_photo_panel3_photo_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rivanna2_solar_photo_panel4_photo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rivanna2_solar_photo_panel4_photo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rivanna2_solar_photo_panel4_photo_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
